# coding: utf-8

"""
GenAI MicroService - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_server.models.module_courses import ModuleCourses

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Module(BaseModel):
    """
    Module
    """  # noqa: E501

    id: Optional[StrictInt] = None
    code: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    title_en: Optional[StrictStr] = None
    content: Optional[StrictStr] = None
    content_en: Optional[StrictStr] = None
    outcome: Optional[StrictStr] = None
    outcome_en: Optional[StrictStr] = None
    methods: Optional[StrictStr] = None
    methods_en: Optional[StrictStr] = None
    exam: Optional[StrictStr] = None
    exam_en: Optional[StrictStr] = None
    credits: Optional[Union[StrictFloat, StrictInt]] = None
    courses: Optional[ModuleCourses] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "code",
        "title",
        "title_en",
        "content",
        "content_en",
        "outcome",
        "outcome_en",
        "methods",
        "methods_en",
        "exam",
        "exam_en",
        "credits",
        "courses",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Module from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of courses
        if self.courses:
            _dict["courses"] = self.courses.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Module from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "code": obj.get("code"),
                "title": obj.get("title"),
                "title_en": obj.get("title_en"),
                "content": obj.get("content"),
                "content_en": obj.get("content_en"),
                "outcome": obj.get("outcome"),
                "outcome_en": obj.get("outcome_en"),
                "methods": obj.get("methods"),
                "methods_en": obj.get("methods_en"),
                "exam": obj.get("exam"),
                "exam_en": obj.get("exam_en"),
                "credits": obj.get("credits"),
                "courses": (
                    ModuleCourses.from_dict(obj.get("courses"))
                    if obj.get("courses") is not None
                    else None
                ),
            }
        )
        return _obj
