# coding: utf-8

"""
GenAI MicroService - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.module import Module

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class StudyProgram(BaseModel):
    """
    StudyProgram
    """  # noqa: E501

    study_id: Optional[StrictInt] = None
    program_name: Optional[StrictStr] = None
    degree_program_name: Optional[StrictStr] = None
    degree_type_name: Optional[StrictStr] = None
    semesters: Optional[Dict[str, List[Module]]] = None
    __properties: ClassVar[List[str]] = [
        "study_id",
        "program_name",
        "degree_program_name",
        "degree_type_name",
        "semesters",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StudyProgram from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in semesters (dict of array)
        _field_dict_of_array = {}
        if self.semesters:
            for _key in self.semesters:
                if self.semesters[_key] is not None:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.semesters[_key]
                    ]
            _dict["semesters"] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StudyProgram from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "study_id": obj.get("study_id"),
                "program_name": obj.get("program_name"),
                "degree_program_name": obj.get("degree_program_name"),
                "degree_type_name": obj.get("degree_type_name"),
                "semesters": dict(
                    (
                        _k,
                        (
                            [Module.from_dict(_item) for _item in _v]
                            if _v is not None
                            else None
                        ),
                    )
                    for _k, _v in obj.get("semesters").items()
                ),
            }
        )
        return _obj
