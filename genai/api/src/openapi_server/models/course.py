# coding: utf-8

"""
GenAI MicroService - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.appointment import Appointment

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Course(BaseModel):
    """
    Course
    """  # noqa: E501

    course_id: Optional[StrictInt] = Field(default=None, alias="courseId")
    course_type: Optional[StrictStr] = Field(default=None, alias="courseType")
    course_name: Optional[StrictStr] = Field(default=None, alias="courseName")
    course_name_en: Optional[StrictStr] = Field(default=None, alias="courseNameEn")
    course_name_list: Optional[StrictStr] = Field(default=None, alias="courseNameList")
    course_name_list_en: Optional[StrictStr] = Field(
        default=None, alias="courseNameListEn"
    )
    appointments: Optional[List[Appointment]] = None
    __properties: ClassVar[List[str]] = [
        "courseId",
        "courseType",
        "courseName",
        "courseNameEn",
        "courseNameList",
        "courseNameListEn",
        "appointments",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Course from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in appointments (list)
        _items = []
        if self.appointments:
            for _item in self.appointments:
                if _item:
                    _items.append(_item.to_dict())
            _dict["appointments"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Course from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "courseId": obj.get("courseId"),
                "courseType": obj.get("courseType"),
                "courseName": obj.get("courseName"),
                "courseNameEn": obj.get("courseNameEn"),
                "courseNameList": obj.get("courseNameList"),
                "courseNameListEn": obj.get("courseNameListEn"),
                "appointments": (
                    [Appointment.from_dict(_item) for _item in obj.get("appointments")]
                    if obj.get("appointments") is not None
                    else None
                ),
            }
        )
        return _obj
