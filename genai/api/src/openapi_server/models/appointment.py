# coding: utf-8

"""
GenAI MicroService - OpenAPI 3.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Appointment(BaseModel):
    """
    Appointment
    """  # noqa: E501

    appointment_id: Optional[StrictInt] = None
    series_begin_date: Optional[date] = Field(default=None, alias="seriesBeginDate")
    series_end_date: Optional[date] = Field(default=None, alias="seriesEndDate")
    begin_time: Optional[StrictStr] = Field(default=None, alias="beginTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    weekdays: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "appointment_id",
        "seriesBeginDate",
        "seriesEndDate",
        "beginTime",
        "endTime",
        "weekdays",
    ]

    @field_validator("weekdays")
    def weekdays_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (
                "mo",
                "di",
                "mi",
                "do",
                "fr",
                "sa",
                "so",
            ):
                raise ValueError(
                    "each list item must be one of ('mo', 'di', 'mi', 'do', 'fr', 'sa', 'so')"
                )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Appointment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Appointment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "appointment_id": obj.get("appointment_id"),
                "seriesBeginDate": obj.get("seriesBeginDate"),
                "seriesEndDate": obj.get("seriesEndDate"),
                "beginTime": obj.get("beginTime"),
                "endTime": obj.get("endTime"),
                "weekdays": obj.get("weekdays"),
            }
        )
        return _obj
