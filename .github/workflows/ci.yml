name: Continuous Integration

on:
  push:
    branches:
      - main
    paths:
      - 'client/**'
      - 'embedding-bridge/**'
      - 'genai/**'
      - 'schedule-manager/**'
      - 'scraper/**'
      - 'schedule-optimizer/**'
      - 'nix/**'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.check_client.outputs.changed }}
      embedding_bridge_changed: ${{ steps.check_embedding_bridge.outputs.changed }}
      genai_changed: ${{ steps.check_genai.outputs.changed }}
      schedule_manager_changed: ${{ steps.check_schedule_manager.outputs.changed }}
      scraper_changed: ${{ steps.check_scraper.outputs.changed }}
      schedule_optimizer_changed: ${{ steps.check_schedule_optimizer.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: check_client
        run: |
          COMPONENTS=("client" "embedding-bridge" "genai" "schedule_manager" "scraper" "schedule-optimizer")
          for name in "${COMPONENTS[@]}"; do
            if git diff --name-only HEAD^ HEAD | grep "^${name}/"; then
              echo "${name}=false" >> $GITHUB_OUTPUT
            else
              echo "${name}=true" >> $GITHUB_OUTPUT
            fi
          done

  build-client:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.client_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#client.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#client.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE

  build-embedding-bridge:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.embedding_bridge_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#embedding-bridge.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#embedding-bridge.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE


  build-genai:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.genai_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#genai.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#genai.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE

  build-schedule-manager:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.schedule_manager_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#schedule-manager.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#schedule-manager.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE


  build-scraper:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.scraper_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#scraper.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#scraper.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE
  build-schedule-optimizer:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.schedule_optimizer_changed == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build .#schedule-optimizer.dockerImage
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Load and push Docker image
      run: |
        name=$(nix eval --raw .#schedule-optimizer.pname)
        LOCAL_IMAGE="nixops-${name}:latest"
        REMOTE_LATEST_IMAGE="ghcr.io/aet-devops25/nixops-${name}:latest"
        docker load < result
        docker tag $LOCAL_IMAGE $REMOTE_LATEST_IMAGE
        docker push $REMOTE_LATEST_IMAGE

  integration-test:
    runs-on: ubuntu-latest
    needs:
      - build-client
      - build-embedding-bridge
      - build-genai
      - build-schedule-manager
      - build-scraper
      - build-schedule-optimizer
    if: always()
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v14
      with:
        name: team-nixops
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix flake check -L --option sandbox false --no-pure-eval

  deploy:
    runs-on: ubuntu-latest
    needs:
      - integration-test
    if: always()
    steps:
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/staging.key
        chmod 600 ~/.ssh/staging.key
        cat >>~/.ssh/config <<END
        Host staging
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/staging.key
          StrictHostKeyChecking no
        END
      env:
        SSH_USER: root
        SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        SSH_HOST: ${{ vars.EC2_PUBLIC_IP }}
 
    - name: Run docker-compose on EC2
      run: |
        ssh staging << 'EOF'
          curl -L https://raw.githubusercontent.com/AET-DevOps25/team-nixops/refs/heads/main/docker-compose.yml -o docker-compose.yml
          docker compose pull
          docker compose up -d --force-recreate
        EOF

