openapi: 3.0.3
info:
  title: Scraper API
  version: 1.0.0
  description: API to query TUM courses

paths:
  /semesters:
    get:
      operationId: getSemesters
      summary: Get all semesters
      responses:
        '200':
          description: List of semesters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Semester'

  /semesters/current:
    get:
      operationId: getCurrentSemester
      summary: Get the current semester
      responses:
        '200':
          description: The current semester
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Semester'

  /study-programs:
    get:
      operationId: getStudyPrograms
      summary: Get all study programs
      responses:
        '200':
          description: List of study programs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyProgram'

  /study-programs/{study_id}:
    get:
      operationId: getStudyProgram
      summary: Get study program with id
      parameters:
        - name: study_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: semesterKey
          in: query
          required: true
          description: Semester key, e.g. "2024s"
          schema:
            type: string
            pattern: '^\d{4}[sSwW]$'
      responses:
        '200':
          description: study program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyProgram'

  /study-programs/{study_id}/full:
    get:
      operationId: getFullStudyProgram
      summary: Get study program with id
      parameters:
        - name: study_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: semesterKey
          in: query
          required: true
          description: Semester key, e.g. "2024s"
          schema:
            type: string
            pattern: '^\d{4}[sSwW]$'
      responses:
        '200':
          description: study program
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyProgram'

  /modules:
    get:
      operationId: getModules
      summary: Get modules by program and semester
      parameters:
        - in: query
          name: study_id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the study program
        - in: query
          name: semesterKey
          schema:
            type: string
          required: true
          description: Key of the semester
      responses:
        '200':
          description: List of modules for the specified program and semester
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Module'

  /modules/{module_code}:
    get:
      operationId: getModuleByCode
      summary: Get a module by its module code
      parameters:
        - in: path
          name: module_code
          required: true
          schema:
            type: string
          description: Code of the module to retrieve
      responses:
        '200':
          description: The requested module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        '404':
          description: Module not found

  /modules/{module_code}/courses:
    get:
      operationId: getCoursesByModuleCode
      summary: Get courses for a module in a specific semester
      parameters:
        - in: path
          name: module_code
          required: true
          schema:
            type: string
          description: Code of the module
        - in: query
          name: semesterKey
          required: true
          schema:
            type: string
          description: Key of the semester
      responses:
        '200':
          description: List of courses for the specified module and semester
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '404':
          description: Module or courses not found

components:
  schemas:
    Semester:
      type: object
      properties:
        semesterKey:
          type: string
          example: "2023FS"
        semesterTitle:
          type: string
          example: "Spring Semester 2023"
        semesterTag:
          type: string
          example: "spring"

    StudyProgram:
      type: object
      properties:
        study_id:
          type: integer
          format: int64
          example: "171017263"
        program_name:
          type: string
          example: "Computer Science"
        degree_program_name:
          type: string
          example: "Bachelor of Science in Computer Science"
        degree_type_name:
          type: string
          example: "Bachelor"
        semesters:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Module'

    Module:
      type: object
      properties:
        id:
          type: string
          example: "CS123"
        code:
          type: string
          example: "CS123"
        title:
          type: string
          example: "Introduction to Programming"
        title_en:
          type: string
          example: "Introduction to Programming (EN)"
        content:
          type: string
          example: "Covers basics such as loops, variables, conditionals..."
        content_en:
          type: string
          example: "Covers basics such as loops, variables, conditionals... (EN)"
        outcome:
          type: string
          example: "Students can write basic code."
        outcome_en:
          type: string
          example: "Students can write basic code. (EN)"
        methods:
          type: string
          example: "Lecture, Exercises"
        methods_en:
          type: string
          example: "Lecture, Exercises (EN)"
        exam:
          type: string
          example: "Written exam"
        exam_en:
          type: string
          example: "Written exam (EN)"
        credits:
          type: number
          format: float
          example: 5.0
        courses:
          $ref: '#/components/schemas/ModuleCourses'

    ModuleCourses:
      type: object
      properties:
        lectures:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        tutorials:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        other:
          type: array
          items:
            $ref: '#/components/schemas/Course'
            
    Course:
      type: object
      properties:
        courseId:
          type: integer
          example: 12345
        courseType:
          type: string
          example: "exercise"
        courseName:
          type: string
          example: "Advanced Algorithms"
        courseNameEn:
          type: string
          example: "Advanced Algorithms (EN)"
        courseNameList:
          type: string
          example: "Algorithms, Data Structures"
        courseNameListEn:
          type: string
          example: "Algorithms, Data Structures (EN)"
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'

    Appointment:
      type: object
      properties:
        appointment_id:
          type: integer
          example: 1
        seriesBeginDate:
          type: string
          format: date
          example: "2024-03-01"
        seriesEndDate:
          type: string
          format: date
          example: "2024-07-01"
        beginTime:
          type: string
          example: "08:00"
        endTime:
          type: string
          example: "10:00"
        weekdays:
          type: array
          items:
            type: string
            enum: [mo, di, mi, do, fr, sa, so]
          example: ["mo", "di"]
